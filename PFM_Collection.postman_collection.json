{
	"info": {
		"_postman_id": "94b2c555-20d3-444c-b190-dc004829b174",
		"name": "PFM | TEST",
		"description": "StartFragment\n\nEsta colección de Postman ha sido creada con el objetivo de optimizar y mejorar el proceso de pruebas y aseguramiento de la calidad en nuestro proyecto \\[PFM\\]. Como QA, he recopilado y organizado cuidadosamente una serie de solicitudes API esenciales que representan los principales escenarios y funcionalidades críticas de nuestra aplicación.  \n  \n\\## Estructura de la colección  \n  \nLa estructura jerárquica de la colección está diseñada de manera intuitiva, con carpetas que agrupan las solicitudes según su funcionalidad y relación. Además, se han definido variables globales y locales para simplificar la configuración y permitir una fácil adaptabilidad a diferentes entornos.  \n  \n\\## Conjuntos de pruebas  \n  \nAdemás de las solicitudes individuales, se han creado también diversos conjuntos de pruebas (test suites) para validar de forma automática la correcta respuesta de la API ante diferentes escenarios. Estas pruebas están basadas en aserciones predefinidas que verifican tanto los datos retornados como los códigos de estado.\n\n  \n\\### Planes de pruebas anexados.\n\n\\#### Test Automation PFM no OBI | e2e | API.\n\nEsta se encarga de realizar un flujo completo sobre la api teniendo como alcanze los siguientes modulos. access\n\n- users\n- financial entities\n- accounts\n- categories\n- transactions\n- budgets\n- country\n- insights\n    \n\n\\## Objetivos  \n  \nAl compartir esta colección busco apoyar de manera proactiva al team del proyecto a manera de obtener un feedback easy and fast del status del servicio mediante la ejecución de las pruebas realizadas.  \n\nEndFragment\n\n\\## Detalles de prueba\n\n- URL de SWAGGER : [http://ec2-3-21-18-54.us-east-2.compute.amazonaws.com:8080/swagger-ui/index.html?urls.primaryName=PFM%20access#/Access/signup](http://ec2-3-21-18-54.us-east-2.compute.amazonaws.com:8080/swagger-ui/index.html?urls.primaryName=PFM%20access#/Access/signupusuario)\n- [usuario](http://ec2-3-21-18-54.us-east-2.compute.amazonaws.com:8080/swagger-ui/index.html?urls.primaryName=PFM%20access#/Access/signupusuario) de prueba : tonio.\n- password de prueba : tonio.\n- ambiente : QA.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27253345",
		"_collection_link": "https://finos-develop-backend.postman.co/workspace/COLLECTION-PFM-ALL~bf5f071a-22cb-4f0e-9eda-8ae59ab08a8e/collection/27253345-94b2c555-20d3-444c-b190-dc004829b174?action=share&creator=27253345&source=collection_link"
	},
	"item": [
		{
			"name": "Test Automation PFM no OBI | e2e | API",
			"item": [
				{
					"name": "PFM access | 400 | POST | signup - signs up a client.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 400 OK\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"",
									"pm.test(\"El nombre de usuario <<Tonio>> existe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].code).to.eql(\"signup.username.exists\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Tonio\",\n  \"firstLastName\": \"Hanma\",\n  \"secondLastName\": \"Joestar\",\n  \"email\": \"andresl@finerio.com\",\n  \"companyName\": \"finerio\",\n  \"username\": \"tonio\",\n  \"password\": \"tonio\",\n  \"countryShortName\": \"MX\",\n  \"financialEntities\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"signup"
							]
						},
						"description": "Signs up a client. We need some of your data in order to keep in touch."
					},
					"response": [
						{
							"name": "A client created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Juan Antonio\",\n    \"firstLastName\": \"Pérez\",\n    \"secondLastName\": \"García\",\n    \"email\": \"juan.antonio.perez.garcia@gmail.com\",\n    \"companyName\": \"Monsters Inc.\",\n    \"username\": \"juan.perez\",\n    \"password\": \"myPassword\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"name\": \"Juan Antonio\",\n \"firstLastName\": \"Pérez\",\n \"secondLastName\": \"García\",\n \"email\": \"juan.antonio.perez.garcia@gmail.com\",\n \"companyName\": \"Monsters Inc.\",\n \"username\": \"juan.perez\"\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Juan Antonio\",\n    \"firstLastName\": \"Pérez\",\n    \"secondLastName\": \"García\",\n    \"email\": \"juan.antonio.perez.garcia@gmail.com\",\n    \"companyName\": \"Monsters Inc.\",\n    \"username\": \"juan.perez\",\n    \"password\": \"myPassword\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Juan Antonio\",\n    \"firstLastName\": \"Pérez\",\n    \"secondLastName\": \"García\",\n    \"email\": \"juan.antonio.perez.garcia@gmail.com\",\n    \"companyName\": \"Monsters Inc.\",\n    \"username\": \"juan.perez\",\n    \"password\": \"myPassword\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM access | 200 | POST | LOGIN - login as client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"The response has all properties\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.username).to.not.null;",
									"    pm.expect(responseJson.roles).to.not.null;",
									"    pm.expect(responseJson.access_token).to.not.null;",
									"    pm.expect(responseJson.token_type).to.not.null;",
									"    pm.expect(responseJson.refresh_token).to.not.null;",
									"    pm.expect(responseJson.expires_in).to.not.null;",
									"    ",
									"});",
									"",
									"if(pm.response.code === 200){",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('AccessToken', jsonData.access_token);",
									"    pm.environment.set('regresh_token', jsonData.refresh_token)",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "Authenticates a client. Here, you use the username and the password you provided in the signup process."
					},
					"response": [
						{
							"name": "Login data.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"client-username\",\n    \"password\": \"client-password\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"username\": \"client-username\",\n \"roles\": [\n  \"ROLE_USER\"\n ],\n \"access_token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_\",\n \"refresh_token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_\",\n \"token_type\": \"Bearer\",\n \"expires_in\": 3600\n}"
						},
						{
							"name": "Invalid credentials.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"client-username\",\n    \"password\": \"client-password\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"client-username\",\n    \"password\": \"client-password\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM access | 200 | POST | access_toke - refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth/access_token?refresh_token={{regresh_token}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth",
								"access_token"
							],
							"query": [
								{
									"key": "refresh_token",
									"value": "{{regresh_token}}"
								}
							]
						},
						"description": "Allows access token refreshing. Use this endpoint to guarantee more security in your workflow."
					},
					"response": [
						{
							"name": "Refresh token data.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "exercitation Ut elit ad",
											"description": "(Required) The refresh token previously obtained."
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "(Required) The type of operation used. It should be \"refresh-token\"."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth/access_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth",
										"access_token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"access_token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_\",\n \"refresh_token\": \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmaW50b25pYy10ZXN0aW5nIiwibmJmIjoxNTkxMDI4ODMxLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaXNzIjoiZmluZXJpby1jb25uZWN0LWxpdGUiLCJleHAiOjE1OTEwMzI0MzEsImlhdCI6MTU5MTAyODgzMX0.ZiY6aXhOU_mIi00pXIE4lHfhjBhyRb8-eVTfVAq34_\",\n \"token_type\": \"Bearer\",\n \"expires_in\": 3600\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "exercitation Ut elit ad",
											"description": "(Required) The refresh token previously obtained."
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "(Required) The type of operation used. It should be \"refresh-token\"."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth/access_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth",
										"access_token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "exercitation Ut elit ad",
											"description": "(Required) The refresh token previously obtained."
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"description": "(Required) The type of operation used. It should be \"refresh-token\"."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth/access_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth",
										"access_token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM users | 200 | POST | users - create users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created user",
									"if(pm.response.code===200){",
									"    var user = pm.response.json();",
									"    pm.environment.set('IdUser', user.id);",
									"    pm.environment.set('NameUser', user.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomProductName}} {{$randomNoun}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Creates a user. Any kind of name with a size up to 100 characters is allowed. Usernames are unique per client."
					},
					"response": [
						{
							"name": "A user created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"name\": \"user@email.com\",\n \"id\": 123,\n \"dateCreated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM users | 200 | GET | users - fetch list users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save randomly some user",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var users = response.data;",
									"    if (users && users.length > 0) {",
									"        var user = users[Math.floor(Math.random() * users.length)];",
									"        pm.environment.set('IdUser', user.id);",
									"        pm.environment.set('NameUser', user.name);",
									"    }",
									"};",
									"",
									"",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON",
									"",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
									"    pm.test(\"El campo 'data' no está vacío\", function () {",
									"        pm.expect(jsonData.data).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?cursor=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "cursor",
									"value": "0",
									"description": "The ID of the user where the list starts."
								}
							]
						},
						"description": "Fetches a list of users of a client, sorted by ID in descending order. The API is able to fetch up to 100 users. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list users.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"name\": \"user@email.com\",\n   \"id\": 123,\n   \"dateCreated\": 1587567125458\n  },\n  {\n   \"name\": \"user@email.com\",\n   \"id\": 123,\n   \"dateCreated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM users | 200 | GET | users - fetch especific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save randomly some user",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var users = response.data;",
									"    if (users && users.length > 0) {",
									"        var user = users[Math.floor(Math.random() * users.length)];",
									"        pm.environment.set('IdUser', user.id);",
									"        pm.environment.set('NameUser', user.name);",
									"    }",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"query": [
								{
									"key": "cursor",
									"value": "0",
									"description": "The ID of the user where the list starts.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdUser}}"
								}
							]
						},
						"description": "Fetches a list of users of a client, sorted by ID in descending order. The API is able to fetch up to 100 users. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list users.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"name\": \"user@email.com\",\n   \"id\": 123,\n   \"dateCreated\": 1587567125458\n  },\n  {\n   \"name\": \"user@email.com\",\n   \"id\": 123,\n   \"dateCreated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM users | 200 | PUT | users - update fetch especific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 - update name\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created user",
									"if(pm.response.code===200){",
									"    var user = pm.response.json();",
									"    pm.environment.set('IdUser', user.id);",
									"    pm.environment.set('NameUser', user.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCurrencyName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdUser}}",
									"description": "(Required) The ID of the user to request."
								}
							]
						},
						"description": "Updates a user. Any kind of name with a size up to 100 characters is allowed. The new name should not be previously registered."
					},
					"response": [
						{
							"name": "A user updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"name\": \"user@email.com\",\n \"id\": 123,\n \"dateCreated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The user ID you requested was not found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"user@email.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM financial entities | 200 | POST | financialEntities - create a financial entities.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 - create financial entities\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created bank",
									"if(pm.response.code===200){",
									"    var bank = pm.response.json();",
									"    pm.environment.set('IdBank', bank.id);",
									"    pm.environment.set('NameBank', bank.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"code\": \"{{$randomBankAccountBic}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/financialEntities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"financialEntities"
							]
						},
						"description": "Creates an financial entity. Every client has its own financial entities. Every financial entity code is unique per client."
					},
					"response": [
						{
							"name": "A financial entity created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"name\": \"National Bank of Wakanda\",\n \"code\": \"WAKANDA-NB\",\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM financial entities | 200 | GET | financialEntities - fetche a list  of financial entities.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save randomly some bank",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var banks = response.data;",
									"    if (banks && banks.length > 0) {",
									"        var bank = banks[Math.floor(Math.random() * banks.length)];",
									"        pm.environment.set('IdBank', bank.id);",
									"        pm.environment.set('NameBank', bank.name);",
									"    }",
									"};",
									"",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON",
									"",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
									"    pm.test(\"El campo 'data' no está vacío\", function () {",
									"        pm.expect(jsonData.data).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/financialEntities?cursor=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"financialEntities"
							],
							"query": [
								{
									"key": "cursor",
									"value": "0",
									"description": "The ID of the financial entity where the list starts."
								}
							]
						},
						"description": "Fetches a list of financial entities per client, sorted by ID in descending order. The API is able to fetch up to 100 financial entities. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of financial entitites.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"name\": \"National Bank of Wakanda\",\n   \"code\": \"WAKANDA-NB\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"name\": \"National Bank of Wakanda\",\n   \"code\": \"WAKANDA-NB\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM financial entities | 200 | GET | financialEntities - fetche a especifi financial entities.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - service response OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/financialEntities/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"financialEntities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdBank}}"
								}
							]
						},
						"description": "Fetches a list of financial entities per client, sorted by ID in descending order. The API is able to fetch up to 100 financial entities. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of financial entitites.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"name\": \"National Bank of Wakanda\",\n   \"code\": \"WAKANDA-NB\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"name\": \"National Bank of Wakanda\",\n   \"code\": \"WAKANDA-NB\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities?cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities"
									],
									"query": [
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM financial entities | 200 | PUT | financialEntities - Update a financial entity.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 update correct financial entity\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save updated bank",
									"if(pm.response.code===200){",
									"    var bank = pm.response.json();",
									"    pm.environment.set('IdBank', bank.id);",
									"    pm.environment.set('NameBank', bank.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"code\": \"{{$randomBankAccountBic}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/financialEntities/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"financialEntities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdBank}}",
									"description": "(Required) The ID of the financial entity to request."
								}
							]
						},
						"description": "Updates a financial entity."
					},
					"response": [
						{
							"name": "A financial entity updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"name\": \"National Bank of Wakanda\",\n \"code\": \"WAKANDA-NB\",\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The financial entity ID you requested was not found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"National Bank of Wakanda\",\n    \"code\": \"WAKANDA-NB\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM accounts | 200 | POST | accounts - Creates an account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created account",
									"if(pm.response.code===200){",
									"    var account = pm.response.json();",
									"    pm.environment.set('IdAccount', account.id);",
									"    pm.environment.set('NameAccount', account.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{IdUser}},\n    \"financialEntityId\": {{IdBank}},\n    \"nature\": \"Credit card\",\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"number\": \"{{$randomCreditCardMask}}\",\n    \"balance\": {{$randomPrice}},\n    \"chargeable\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							]
						},
						"description": "Creates an account. A previosuly created user and a financial entity is required."
					},
					"response": [
						{
							"name": "An account created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"financialEntityId\": 123,\n    \"nature\": \"Mortgage\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"nature\": \"Credit card\",\n \"name\": \"Premium Account\",\n \"number\": \"XXX-1234\",\n \"balance\": 1234.56,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"financialEntityId\": 123,\n    \"nature\": \"Mortgage\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"financialEntityId\": 123,\n    \"nature\": \"Mortgage\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"financialEntityId\": 123,\n    \"nature\": \"Mortgage\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM accounts | 200 | GET | accounts - Fectch especific accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created account",
									"if(pm.response.code===200){",
									"    var account = pm.response.json();",
									"    pm.environment.set('IdAccount', account.id);",
									"    pm.environment.set('NameAccount', account.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/accounts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdAccount}}"
								}
							]
						},
						"description": "Given a valid account ID, fetches the information of an account."
					},
					"response": [
						{
							"name": "The information of the account requested.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"nature\": \"Credit card\",\n \"name\": \"Premium Account\",\n \"number\": \"XXX-1234\",\n \"balance\": 1234.56,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The account ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM accounts | 200 | GET | accounts - Fectch list of accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 service response \", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON",
									"",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
									"    pm.test(\"El campo 'data' no está vacío\", function () {",
									"        pm.expect(jsonData.data).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/accounts?userId={{IdUser}}&cursor=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{IdUser}}",
									"description": "(Required) The ID of the user that owns the accounts."
								},
								{
									"key": "cursor",
									"value": "0",
									"description": "The ID of the account where the list starts."
								},
								{
									"key": "isBankAggregation",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "Fetches a list of accounts per user, sorted by ID in descending order. The API is able to fetch up to 100 accounts. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of accounts.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"nature\": \"Debit\",\n   \"name\": \"Premium Account\",\n   \"number\": \"XXX-1234\",\n   \"balance\": 1234.56,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"nature\": \"Investment\",\n   \"name\": \"Premium Account\",\n   \"number\": \"XXX-1234\",\n   \"balance\": 1234.56,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM accounts | 200 | PUT | accounts - update an account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 update account success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created account",
									"if(pm.response.code===200){",
									"    var account = pm.response.json();",
									"    pm.environment.set('IdAccount', account.id);",
									"    pm.environment.set('NameAccount', account.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nature\": \"Investment\",\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"number\": \"{{$randomCreditCardMask}}\",\n    \"balance\": {{$randomPrice}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/accounts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdAccount}}",
									"description": "(Required) The ID of the account to request."
								}
							]
						},
						"description": "Updates an account."
					},
					"response": [
						{
							"name": "An account updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nature\": \"Investment\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"nature\": \"Credit card\",\n \"name\": \"Premium Account\",\n \"number\": \"XXX-1234\",\n \"balance\": 1234.56,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nature\": \"Investment\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The account ID you requested was not found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nature\": \"Investment\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nature\": \"Investment\",\n    \"name\": \"Premium Account\",\n    \"number\": \"XXX-1234\",\n    \"balance\": 1234.56\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM categories| 200 | POST | categories - Creates an category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 category created success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created category",
									"if(pm.response.code===200){",
									"    var category = pm.response.json();",
									"    pm.environment.set('IdCategory', category.id);",
									"    pm.environment.set('NameCategory', category.name);",
									"    pm.environment.set('IdParentCategory', category.parentCategoryId);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomJobArea}}\",\n    \"userId\": {{IdUser}},\n    \"color\": \"orchid\",\n    \"parentCategoryId\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Creates a category. If a user ID is not specified, the category is considered as a system category. If a parent category ID is specified, the category is considered a subcategory."
					},
					"response": [
						{
							"name": "A category created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"userId\": 123,\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"name\": \"Ropa y Calzado\",\n \"color\": \"#00FFAA\",\n \"parentCategoryId\": 123,\n \"userId\": 123,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"userId\": 123,\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"userId\": 123,\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"userId\": 123,\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM categories| 200 | GET | categories - Fetches a list of categories system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 get categories systems\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save category for parent id",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var categories = response.data.filter(c => !c.parentCategoryId);",
									"    if (categories && categories.length > 0) {",
									"        var category = categories[Math.floor(Math.random() * categories.length)];",
									"        pm.environment.set(\"IdParentCategory\", category.id);",
									"    }",
									"};",
									"",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON",
									"",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
									"    pm.test(\"El campo 'data' no está vacío\", function () {",
									"        pm.expect(jsonData.data).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories?userId={{IdUser}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{IdUser}}",
									"description": "The ID of the user."
								}
							]
						},
						"description": "Fetches a list of categories, sorted by ID in descending order. The API is able to fetch up to 100 categories. If a cursor is specified, the list starts with the item that has that ID. If a user ID is specified, both system and user categories are fetched. If a user ID is not specified, only system categories are fetched."
					},
					"response": [
						{
							"name": "A list of categories.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"name\": \"Ropa y Calzado\",\n   \"color\": \"#00FFAA\",\n   \"parentCategoryId\": 123,\n   \"userId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"name\": \"Ropa y Calzado\",\n   \"color\": \"#00FFAA\",\n   \"parentCategoryId\": 123,\n   \"userId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM categories| 200 | GET | categories - Fetches a list of categories users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 get categories create by user\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save category for parent id",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var categories = response.data.filter(c => !c.parentCategoryId);",
									"    if (categories && categories.length > 0) {",
									"        var category = categories[Math.floor(Math.random() * categories.length)];",
									"        pm.environment.set(\"IdParentCategory\", category.id);",
									"    }",
									"};",
									"",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON",
									"",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
									"    pm.test(\"El campo 'data' no está vacío\", function () {",
									"        pm.expect(jsonData.data).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories?userId={{IdUser}}&isUserCategory=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{IdUser}}",
									"description": "The ID of the user."
								},
								{
									"key": "isUserCategory",
									"value": "true"
								}
							]
						},
						"description": "Fetches a list of categories, sorted by ID in descending order. The API is able to fetch up to 100 categories. If a cursor is specified, the list starts with the item that has that ID. If a user ID is specified, both system and user categories are fetched. If a user ID is not specified, only system categories are fetched."
					},
					"response": [
						{
							"name": "A list of categories.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"name\": \"Ropa y Calzado\",\n   \"color\": \"#00FFAA\",\n   \"parentCategoryId\": 123,\n   \"userId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"name\": \"Ropa y Calzado\",\n   \"color\": \"#00FFAA\",\n   \"parentCategoryId\": 123,\n   \"userId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM categories | 200 | PUT | categories - update a category especific",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created category",
									"if(pm.response.code===200){",
									"    var category = pm.response.json();",
									"    pm.environment.set('IdCategory', category.id);",
									"    pm.environment.set('NameCategory', category.name);",
									"    pm.environment.set('IdParentCategory', category.parentCategoryId);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomDepartment}}\",\n    \"color\": \"yellow\",\n    \"parentCategoryId\": null\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdCategory}}",
									"description": "(Required) The ID of the category to update."
								}
							]
						},
						"description": "Updates a category."
					},
					"response": [
						{
							"name": "A category updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"name\": \"Ropa y Calzado\",\n \"color\": \"#00FFAA\",\n \"parentCategoryId\": 123,\n \"userId\": 123,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The category ID you requested was not found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ropa y Calzado\",\n    \"color\": \"#00FFAA\",\n    \"parentCategoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM transactions | 200 | POST | transactions - create transacctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200  create transacctions\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created transaction",
									"if(pm.response.code===200){",
									"    var transaction = pm.response.json();",
									"    pm.environment.set('IdTransaction', transaction.id);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": {{IdAccount}},\n    \"date\": \"{{$timestamp}}000\",\n    \"charge\": true,\n    \"description\": \"SPEI TT SALIDA SCOMISIN PAGO CEL RECEPTOR BANREGIO\",\n    \"amount\": 1410,\n    \"categoryId\": 100010004\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions"
							]
						},
						"description": "Creates a transaction. A previosuly created account is required."
					},
					"response": [
						{
							"name": "A transaction created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"date\": 1587567125458,\n \"charge\": true,\n \"description\": \"UBER EATS\",\n \"amount\": 1234.56,\n \"categoryId\": 123,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM transactions | 200 | POST | transactions - create transacctions incomes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200  create transacctions\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created transaction",
									"if(pm.response.code===200){",
									"    var transaction = pm.response.json();",
									"    pm.environment.set('IdTransaction', transaction.id);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": {{IdAccount}},\n    \"date\": \"{{$timestamp}}000\",\n    \"charge\": false,\n    \"description\": \"SPEI TT Entrada SCOMISIN PAGO CEL RECEPTOR BANREGIO\",\n    \"amount\": 1410,\n    \"categoryId\": 100010004\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions"
							]
						},
						"description": "Creates a transaction. A previosuly created account is required."
					},
					"response": [
						{
							"name": "A transaction created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"date\": 1587567125458,\n \"charge\": true,\n \"description\": \"UBER EATS\",\n \"amount\": 1234.56,\n \"categoryId\": 123,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountId\": 123,\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM transactions | 200 | GET | transactions - fecth list transacctions by accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 service ok\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON",
									"",
									"// Verificar si el campo de datos es un array y no está vacío",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {",
									"    pm.test(\"El campo 'data' no está vacío\", function () {",
									"        pm.expect(jsonData.data).to.not.be.empty;",
									"    });",
									"} else {",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/transactions?accountIds={{IdAccount}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions"
							],
							"query": [
								{
									"key": "cursor",
									"value": "0",
									"disabled": true
								},
								{
									"key": "isBankAggregation",
									"value": "false",
									"description": "true | false",
									"disabled": true
								},
								{
									"key": "charge",
									"value": "true",
									"disabled": true
								},
								{
									"key": "accountIds",
									"value": "{{IdAccount}}"
								}
							]
						},
						"description": "Fetches a list of transactions per account, sorted by ID in descending order. The API is able to fetch up to 100 transactions. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of transactions.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"date\": 1587567125458,\n   \"charge\": true,\n   \"description\": \"UBER EATS\",\n   \"amount\": 1234.56,\n   \"categoryId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"date\": 1587567125458,\n   \"charge\": true,\n   \"description\": \"UBER EATS\",\n   \"amount\": 1234.56,\n   \"categoryId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM transactions | 200 | GET | transactions - fecth transacctions by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - get ID TRXS\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/transactions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdTransaction}}"
								}
							]
						},
						"description": "Fetches a list of transactions per account, sorted by ID in descending order. The API is able to fetch up to 100 transactions. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of transactions.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"date\": 1587567125458,\n   \"charge\": true,\n   \"description\": \"UBER EATS\",\n   \"amount\": 1234.56,\n   \"categoryId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"date\": 1587567125458,\n   \"charge\": true,\n   \"description\": \"UBER EATS\",\n   \"amount\": 1234.56,\n   \"categoryId\": 123,\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?accountId=123&categoryId=123&description=UBER&charge=true&minAmount=123.45&maxAmount=123.45&dateFrom=1587567125458&dateTo=1587567125458&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "categoryId",
											"value": "123"
										},
										{
											"key": "description",
											"value": "UBER"
										},
										{
											"key": "charge",
											"value": "true"
										},
										{
											"key": "minAmount",
											"value": "123.45"
										},
										{
											"key": "maxAmount",
											"value": "123.45"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM transactions | 200 | PUT | transactions  - Updates a transaction.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 update transaction success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created transaction",
									"if(pm.response.code===200){",
									"    var transaction = pm.response.json();",
									"    pm.environment.set('IdTransaction', transaction.id);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountId\": {{IdAccount}},\n    \"date\": \"{{$timestamp}}000\",\n    \"charge\": {{$randomBoolean}},\n    \"description\": \"{{$randomTransactionType}}\",\n    \"amount\": {{$randomPrice}},\n    \"categoryId\": 100010004\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/transactions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdTransaction}}",
									"description": "(Required) The ID of the transaction to request."
								}
							]
						},
						"description": "Updates a transaction."
					},
					"response": [
						{
							"name": "A transaction updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"date\": 1587567125458,\n \"charge\": true,\n \"description\": \"UBER EATS\",\n \"amount\": 1234.56,\n \"categoryId\": 123,\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The transaction ID you requested was not found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"date\": 1587567125458,\n    \"charge\": true,\n    \"description\": \"UBER EATS\",\n    \"amount\": 1234.56,\n    \"categoryId\": 123\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM budgets | 200 | POST | budgets - creates a budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Save created budget",
									"if(pm.response.code===200){",
									"    var budget = pm.response.json();",
									"    pm.environment.set('IdBudget', budget.id);",
									"    pm.environment.set('NameBudget', budget.name);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{IdUser}},\n    \"categoryId\": 100010003,\n    \"name\": \"{{$randomFullName}}\",\n    \"amount\": 100,\n    \"warningPercentage\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/budgets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"budgets"
							]
						},
						"description": "Creates a budget. A previosuly created user and a category is required. There can be only one budget per category."
					},
					"response": [
						{
							"name": "A budget created.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"categoryId\": 123,\n \"name\": \"Food budget\",\n \"amount\": 1234.56,\n \"warningPercentage\": 0.7,\n \"spent\": 123.45,\n \"leftToSpend\": 123.45,\n \"status\": \"ok\",\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 123,\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM budgets | 200 | GET | budgets - get lists budgets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save randomly some account",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var budgets = response.data;",
									"    if (budgets && budgets.length > 0) {",
									"        var budget = budgets[Math.floor(Math.random() * budgets.length)];",
									"        pm.environment.set('IdBudget', budget.id);",
									"        pm.environment.set('NameBudget', budget.name);",
									"    }",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/budgets?userId={{IdUser}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"budgets"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{IdUser}}",
									"description": "(Required) The ID of the user."
								}
							]
						},
						"description": "Fetches a list of budgets per user, sorted by ID in descending order. The API is able to fetch up to 100 budgets. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of budgets.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"categoryId\": 123,\n   \"name\": \"Food budget\",\n   \"amount\": 1234.56,\n   \"warningPercentage\": 0.7,\n   \"spent\": 123.45,\n   \"leftToSpend\": 123.45,\n   \"status\": \"danger\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"categoryId\": 123,\n   \"name\": \"Food budget\",\n   \"amount\": 1234.56,\n   \"warningPercentage\": 0.7,\n   \"spent\": 123.45,\n   \"leftToSpend\": 123.45,\n   \"status\": \"warning\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM budgets | 200 | GET | budgets - get especific budgets by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Choose and save randomly some account",
									"if(pm.response.code===200){",
									"    var response = pm.response.json();",
									"    var budgets = response.data;",
									"    if (budgets && budgets.length > 0) {",
									"        var budget = budgets[Math.floor(Math.random() * budgets.length)];",
									"        pm.environment.set('IdBudget', budget.id);",
									"        pm.environment.set('NameBudget', budget.name);",
									"    }",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/budgets/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"budgets",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdBudget}}"
								}
							]
						},
						"description": "Fetches a list of budgets per user, sorted by ID in descending order. The API is able to fetch up to 100 budgets. If a cursor is specified, the list starts with the item that has that ID."
					},
					"response": [
						{
							"name": "A list of budgets.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"id\": 123,\n   \"categoryId\": 123,\n   \"name\": \"Food budget\",\n   \"amount\": 1234.56,\n   \"warningPercentage\": 0.7,\n   \"spent\": 123.45,\n   \"leftToSpend\": 123.45,\n   \"status\": \"danger\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  },\n  {\n   \"id\": 123,\n   \"categoryId\": 123,\n   \"name\": \"Food budget\",\n   \"amount\": 1234.56,\n   \"warningPercentage\": 0.7,\n   \"spent\": 123.45,\n   \"leftToSpend\": 123.45,\n   \"status\": \"warning\",\n   \"dateCreated\": 1587567125458,\n   \"lastUpdated\": 1587567125458\n  }\n ],\n \"nextCursor\": 123\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets?userId=123&cursor=123",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "cursor",
											"value": "123"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM budgets | 200 | PUT | budgets - Updates a budget.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 200 update budgets success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{IdUser}},\n    \"categoryId\": 100010004,\n    \"name\": \"{{$randomDepartment}}\",\n    \"amount\":  {{$randomPrice}},\n    \"warningPercentage\": 0.7\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/budgets/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"budgets",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdBudget}}",
									"description": "(Required) The ID of the budget to update."
								}
							]
						},
						"description": "Updates a budget."
					},
					"response": [
						{
							"name": "A budget updated.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 123,\n \"categoryId\": 123,\n \"name\": \"Food budget\",\n \"amount\": 1234.56,\n \"warningPercentage\": 0.7,\n \"spent\": 123.45,\n \"leftToSpend\": 123.45,\n \"status\": \"ok\",\n \"dateCreated\": 1587567125458,\n \"lastUpdated\": 1587567125458\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The budget ID you requested was not found.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"categoryId\": 123,\n    \"name\": \"Food budget\",\n    \"amount\": 1234.56,\n    \"warningPercentage\": 0.7\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM country | 200 | GET | country - get all country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Services OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON\r",
									"\r",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {\r",
									"    pm.test(\"El campo 'data' no está vacío\", function () {\r",
									"        pm.expect(jsonData.data).to.not.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {\r",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/country",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "PFM country | 400 | POST | country | Create a  one country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404  service response OK , Countre WK exist\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"WAKANDA\",\r\n    \"shortName\": \"WK\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/country",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "PFM insights | 200 | GET | resume -  Fetches a resume of the financial information of a user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 el servicio responde.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON\r",
									"\r",
									"if (Array.isArray(jsonData.incomes) && jsonData.incomes.length > 0) {\r",
									"    pm.test(\"El campo 'incomes' no está vacío\", function () {\r",
									"        pm.expect(jsonData.incomes).to.not.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"El campo 'incomes' debe ser un array no vacío\", function () {\r",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (Array.isArray(jsonData.balances) && jsonData.balances.length > 0) {\r",
									"    pm.test(\"El campo 'balances' no está vacío\", function () {\r",
									"        pm.expect(jsonData.balances).to.not.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"El campo 'balances' debe ser un array no vacío\", function () {\r",
									"        pm.expect.fail(\"El campo 'balances' es inválido o está vacío\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (Array.isArray(jsonData.expenses) && jsonData.expenses.length > 0) {\r",
									"    pm.test(\"El campo 'expenses' no está vacío\", function () {\r",
									"        pm.expect(jsonData.expenses).to.not.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"El campo 'balances' debe ser un array no vacío\", function () {\r",
									"        pm.expect.fail(\"El campo 'expenses' es inválido o está vacío\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/resume?userId={{IdUser}}&accountId={{IdAccount}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"resume"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{IdUser}}"
								},
								{
									"key": "accountId",
									"value": "{{IdAccount}}"
								},
								{
									"key": "dateFrom",
									"value": "1639267200000",
									"disabled": true
								},
								{
									"key": "dateTo",
									"value": "1673481600000",
									"disabled": true
								}
							]
						},
						"description": "Given a valid user ID, fetches a resume of the financial information of a user. It contains expenses, incomes and balances."
					},
					"response": [
						{
							"name": "The resume of a user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resume?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resume"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"incomes\": [\n  {\n   \"date\": 15912423261854,\n   \"amount\": 123.45,\n   \"categories\": [\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    },\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    }\n   ]\n  },\n  {\n   \"date\": 15912423261854,\n   \"amount\": 123.45,\n   \"categories\": [\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    },\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    }\n   ]\n  }\n ],\n \"expenses\": [\n  {\n   \"date\": 15912423261854,\n   \"amount\": 123.45,\n   \"categories\": [\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    },\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    }\n   ]\n  },\n  {\n   \"date\": 15912423261854,\n   \"amount\": 123.45,\n   \"categories\": [\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    },\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactionsByDate\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    }\n   ]\n  }\n ],\n \"balances\": [\n  {\n   \"date\": 15912423261854,\n   \"incomes\": 123.45,\n   \"expenses\": 123.45\n  },\n  {\n   \"date\": 15912423261854,\n   \"incomes\": 123.45,\n   \"expenses\": 123.45\n  }\n ]\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resume?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resume"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resume?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resume"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/resume?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"resume"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM insights | 200 | GET | insights - Fetches an analysis of the financial information of a user.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 el servicio responde\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json(); // Obtener la respuesta JSON\r",
									"\r",
									"if (Array.isArray(jsonData.data) && jsonData.data.length > 0) {\r",
									"    pm.test(\"El campo 'data' no está vacío\", function () {\r",
									"        pm.expect(jsonData.data).to.not.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"El campo 'data' debe ser un array no vacío\", function () {\r",
									"        pm.expect.fail(\"El campo 'data' es inválido o está vacío\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/analysis?userId={{IdUser}}&accountId={{IdAccount}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"analysis"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{IdUser}}",
									"description": "(Required) The ID of the user to fetch the analysis."
								},
								{
									"key": "accountId",
									"value": "{{IdAccount}}",
									"description": "The ID of the account to fetch the analysis. If it is not present, the API will use all the accounts of the user."
								},
								{
									"key": "dateFrom",
									"value": "1639267200000",
									"disabled": true
								},
								{
									"key": "dateTo",
									"value": "1673481600000",
									"disabled": true
								}
							]
						},
						"description": "Given a valid user ID, fetches an analysis of the financial information of a user."
					},
					"response": [
						{
							"name": "The analysis of a user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/analysis?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"analysis"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"data\": [\n  {\n   \"date\": 15912423261854,\n   \"categories\": [\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    },\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    }\n   ]\n  },\n  {\n   \"date\": 15912423261854,\n   \"categories\": [\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    },\n    {\n     \"categoryId\": 123,\n     \"amount\": 123.45,\n     \"subcategories\": [\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      },\n      {\n       \"categoryId\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"average\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"quantity\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"amount\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"transactions\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      }\n     ]\n    }\n   ]\n  }\n ]\n}"
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/analysis?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"analysis"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Some ID you requested was not found.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/analysis?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"analysis"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/analysis?userId=123&accountId=123&dateFrom=1587567125458&dateTo=1587567125458",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"analysis"
									],
									"query": [
										{
											"key": "userId",
											"value": "123"
										},
										{
											"key": "accountId",
											"value": "123"
										},
										{
											"key": "dateFrom",
											"value": "1587567125458"
										},
										{
											"key": "dateTo",
											"value": "1587567125458"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM transacctions | 204 | delete | transacctions - Deletes a transaction.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 204 delete transaction create accros test\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/transactions/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdTransaction}}",
									"description": "(Required) The ID of the transaction to request."
								}
							]
						},
						"description": "Deletes a transaction and all its information."
					},
					"response": [
						{
							"name": "The transaction has been deleted successfully.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The transaction ID you requested was not found.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM budgets | 204 | Delete | budget - Deletes a budget.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/budgets/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"budgets",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdBudget}}",
									"description": "(Required) The ID of the budget to request."
								}
							]
						},
						"description": "Deletes a budget and all its information."
					},
					"response": [
						{
							"name": "The budget has been deleted successfully.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The budget ID you requested was not found.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/budgets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"budgets",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM accounts | 204 | Delete | account - Deletes an account.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 204 Delete successfull account\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/accounts/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdAccount}}",
									"description": "(Required) The ID of the account to request."
								}
							]
						},
						"description": "Deletes an account and all its information, including transactions."
					},
					"response": [
						{
							"name": "The account has been deleted successfully.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The account ID you requested was not found.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"accounts",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM financial entities | 204 | Delete | financialEntities - Deletes a financial entity.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 204 Delete successfull financial entities creat accros test\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/financialEntities/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"financialEntities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdBank}}",
									"description": "(Required) The ID of the financial entity to delete."
								}
							]
						},
						"description": "Deletes a financial entity. All accounts related to this financial entity remain active."
					},
					"response": [
						{
							"name": "The financial entity has been deleted successfully.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The financial entity ID you requested was not found.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/financialEntities/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"financialEntities",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "PFM user | 204 | Delete | user - delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Case 204 delete create across test\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"if(pm.response.code===204){",
									"    pm.environment.unset(\"IdUser\");",
									"    pm.environment.unset(\"NameUser\");",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{IdUser}}",
									"description": "(Required) The ID of the user to request."
								}
							]
						},
						"description": "Deletes a user and all its information, including accounts, categories and budgets."
					},
					"response": [
						{
							"name": "The user has been deleted successfully.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Something in the request was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "The user ID you requested was not found.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n },\n {\n  \"title\": \"Error title\",\n  \"code\": \"error.unique.code\",\n  \"detail\": \"Something in your request was wrong or was not found\"\n }\n]"
						},
						{
							"name": "Something in the server was wrong.",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "Pruebas E2E para el servicio PFM sin OBI."
		}
	]
}